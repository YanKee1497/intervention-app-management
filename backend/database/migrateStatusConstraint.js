const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Chemin vers la base de donn√©es
const dbPath = path.join(__dirname, 'intervention_app.db');

// Connexion √† la base de donn√©es
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('Erreur lors de l\'ouverture de la base de donn√©es:', err.message);
  } else {
    console.log('Connexion √† la base de donn√©es SQLite r√©ussie.');
  }
});

async function updateStatusConstraint() {
  try {
    console.log('üîÑ Mise √† jour de la contrainte status pour inclure on_hold...');

    // Cr√©er une nouvelle table avec la contrainte mise √† jour
    await new Promise((resolve, reject) => {
      db.run(`CREATE TABLE tickets_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticket_number TEXT UNIQUE NOT NULL,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        urgency TEXT NOT NULL CHECK(urgency IN ('low', 'medium', 'high', 'critical')),
        status TEXT NOT NULL CHECK(status IN ('pending', 'assigned', 'in_progress', 'on_hold', 'resolved', 'rejected')) DEFAULT 'pending',
        service_id INTEGER NOT NULL,
        employee_id INTEGER NOT NULL,
        technician_id INTEGER,
        attachment_path TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        resolved_at DATETIME,
        FOREIGN KEY (service_id) REFERENCES services (id),
        FOREIGN KEY (employee_id) REFERENCES users (id),
        FOREIGN KEY (technician_id) REFERENCES users (id)
      )`, (err) => {
        if (err) {
          console.error('Erreur lors de la cr√©ation de la nouvelle table:', err);
          reject(err);
        } else {
          console.log('‚úÖ Nouvelle table tickets_new cr√©√©e');
          resolve();
        }
      });
    });

    // Copier les donn√©es existantes
    await new Promise((resolve, reject) => {
      db.run(`INSERT INTO tickets_new 
        SELECT * FROM tickets`, (err) => {
        if (err) {
          console.error('Erreur lors de la copie des donn√©es:', err);
          reject(err);
        } else {
          console.log('‚úÖ Donn√©es copi√©es dans la nouvelle table');
          resolve();
        }
      });
    });

    // Supprimer l'ancienne table
    await new Promise((resolve, reject) => {
      db.run(`DROP TABLE tickets`, (err) => {
        if (err) {
          console.error('Erreur lors de la suppression de l\'ancienne table:', err);
          reject(err);
        } else {
          console.log('‚úÖ Ancienne table supprim√©e');
          resolve();
        }
      });
    });

    // Renommer la nouvelle table
    await new Promise((resolve, reject) => {
      db.run(`ALTER TABLE tickets_new RENAME TO tickets`, (err) => {
        if (err) {
          console.error('Erreur lors du renommage:', err);
          reject(err);
        } else {
          console.log('‚úÖ Table renomm√©e avec succ√®s');
          resolve();
        }
      });
    });

    console.log('üéâ Migration termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  }
}

// Lancer la migration
updateStatusConstraint().then(() => {
  db.close((err) => {
    if (err) {
      console.error('Erreur lors de la fermeture de la base de donn√©es:', err.message);
    } else {
      console.log('‚ú® Base de donn√©es ferm√©e correctement.');
    }
  });
});
